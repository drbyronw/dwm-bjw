--- dwm.c	2014-02-09 15:24:26.148117354 +0100
+++ dwm.c.orig	2014-02-09 15:24:26.156117354 +0100
@@ -48,7 +48,7 @@
 #define CLEANMASK(mask)         (mask & ~(numlockmask|LockMask) & (ShiftMask|ControlMask|Mod1Mask|Mod2Mask|Mod3Mask|Mod4Mask|Mod5Mask))
 #define INTERSECT(x,y,w,h,m)    (MAX(0, MIN((x)+(w),(m)->wx+(m)->ww) - MAX((x),(m)->wx)) \
                                * MAX(0, MIN((y)+(h),(m)->wy+(m)->wh) - MAX((y),(m)->wy)))
-#define ISVISIBLE(C, M)         ((C->tags & M->tagset[M->seltags]))
+#define ISVISIBLE(C)            ((C->tags & C->mon->tagset[C->mon->seltags]))
 #define LENGTH(X)               (sizeof X / sizeof X[0])
 #define MOUSEMASK               (BUTTONMASK|PointerMotionMask)
 #define WIDTH(X)                ((X)->w + 2 * (X)->bw)
@@ -110,7 +110,6 @@
 	void (*arrange)(Monitor *);
 } Layout;
 
-typedef struct Clientlist Clientlist;
 struct Monitor {
 	char ltsymbol[16];
 	float mfact;
@@ -124,8 +123,9 @@
 	unsigned int tagset[2];
 	Bool showbar;
 	Bool topbar;
-	Clientlist *cl;
+	Client *clients;
 	Client *sel;
+	Client *stack;
 	Monitor *next;
 	Window barwin;
 	const Layout *lt[2];
@@ -140,18 +140,12 @@
 	int monitor;
 } Rule;
 
-struct Clientlist {
-	Client *clients;
-	Client *stack;
-};
-
 /* function declarations */
 static void applyrules(Client *c);
 static Bool applysizehints(Client *c, int *x, int *y, int *w, int *h, Bool interact);
 static void arrange(Monitor *m);
 static void arrangemon(Monitor *m);
 static void attach(Client *c);
-static void attachclients(Monitor *m);
 static void attachstack(Client *c);
 static void buttonpress(XEvent *e);
 static void checkotherwm(void);
@@ -189,7 +183,7 @@
 static void monocle(Monitor *m);
 static void motionnotify(XEvent *e);
 static void movemouse(const Arg *arg);
-static Client *nexttiled(Client *c, Monitor *m);
+static Client *nexttiled(Client *c);
 static void pop(Client *);
 static void propertynotify(XEvent *e);
 static void quit(const Arg *arg);
@@ -272,7 +266,6 @@
 static Fnt *fnt;
 static Monitor *mons, *selmon;
 static Window root;
-static Clientlist *cl;
 
 /* configuration, allows nested code to access above variables */
 #include "config.h"
@@ -303,7 +296,7 @@
 		{
 			c->isfloating = r->isfloating;
 			c->tags |= r->tags;
-			for(m = mons; m && (m->tagset[m->seltags] & c->tags) == 0; m = m->next) ;
+			for(m = mons; m && m->num != r->monitor; m = m->next);
 			if(m)
 				c->mon = m;
 		}
@@ -384,9 +377,9 @@
 void
 arrange(Monitor *m) {
 	if(m)
-		showhide(m->cl->stack);
+		showhide(m->stack);
 	else for(m = mons; m; m = m->next)
-		showhide(m->cl->stack);
+		showhide(m->stack);
 	if(m) {
 		arrangemon(m);
 		restack(m);
@@ -403,47 +396,14 @@
 
 void
 attach(Client *c) {
-	c->next = c->mon->cl->clients;
-	c->mon->cl->clients = c;
-}
-
-void
-attachclients(Monitor *m) {
-	/* attach clients to the specified monitor */
-	Monitor *tm;
-	Client *c;
-	unsigned int utags = 0;
-	Bool rmons = False;
-	if(!m)
-		return;
-
-	/* collect information about the tags in use */
-	for(tm = mons; tm; tm = tm->next)
-		if(tm != m)
-			utags |= m->tagset[m->seltags];
-
-	for(c = m->cl->clients; c; c = c->next)
-		if(ISVISIBLE(c, m)) {
-			/* if client is also visible on other tags that are displayed on
-			 * other monitors, remove these tags */
-			if(c->tags & utags) {
-				c->tags = c->tags & m->tagset[m->seltags];
-				rmons = True;
-			}
-			unfocus(c, True);
-			c->mon = m;
-		}
-
-	if(rmons)
-		for(tm = mons; tm; tm = tm->next)
-			if(tm != m)
-				arrange(tm);
+	c->next = c->mon->clients;
+	c->mon->clients = c;
 }
 
 void
 attachstack(Client *c) {
-	c->snext = c->mon->cl->stack;
-	c->mon->cl->stack = c;
+	c->snext = c->mon->stack;
+	c->mon->stack = c;
 }
 
 void
@@ -506,8 +466,8 @@
 	view(&a);
 	selmon->lt[selmon->sellt] = &foo;
 	for(m = mons; m; m = m->next)
-		while(m->cl->stack)
-			unmanage(m->cl->stack, False);
+		while(m->stack)
+			unmanage(m->stack, False);
 	XUngrabKey(dpy, AnyKey, AnyModifier, root);
 	while(mons)
 		cleanupmon(mons);
@@ -567,7 +527,7 @@
 			              || (cme->data.l[0] == 2 /* _NET_WM_STATE_TOGGLE */ && !c->isfullscreen)));
 	}
 	else if(cme->message_type == netatom[NetActiveWindow]) {
-		if(!ISVISIBLE(c, c->mon)) {
+		if(!ISVISIBLE(c)) {
 			c->mon->seltags ^= 1;
 			c->mon->tagset[c->mon->seltags] = c->tags;
 		}
@@ -649,7 +609,7 @@
 				c->y = m->my + (m->mh / 2 - HEIGHT(c) / 2); /* center in y direction */
 			if((ev->value_mask & (CWX|CWY)) && !(ev->value_mask & (CWWidth|CWHeight)))
 				configure(c);
-			if(ISVISIBLE(c, m))
+			if(ISVISIBLE(c))
 				XMoveResizeWindow(dpy, c->win, c->x, c->y, c->w, c->h);
 		}
 		else
@@ -670,18 +630,11 @@
 
 Monitor *
 createmon(void) {
-	Monitor *m, *tm;
-	int i;
+	Monitor *m;
 
 	if(!(m = (Monitor *)calloc(1, sizeof(Monitor))))
 		die("fatal: could not malloc() %u bytes\n", sizeof(Monitor));
-	m->cl = cl;
-	/* reassing tags when creating a new monitor */
-	for(i=1, tm = mons; tm; tm = tm->next, i++) {
-		tm->seltags ^= 1;
-		tm->tagset[tm->seltags] = i;
-	}
-	m->tagset[0] = m->tagset[1] = i;
+	m->tagset[0] = m->tagset[1] = 1;
 	m->mfact = mfact;
 	m->nmaster = nmaster;
 	m->showbar = showbar;
@@ -705,7 +658,7 @@
 detach(Client *c) {
 	Client **tc;
 
-	for(tc = &c->mon->cl->clients; *tc && *tc != c; tc = &(*tc)->next);
+	for(tc = &c->mon->clients; *tc && *tc != c; tc = &(*tc)->next);
 	*tc = c->next;
 }
 
@@ -713,11 +666,11 @@
 detachstack(Client *c) {
 	Client **tc, *t;
 
-	for(tc = &c->mon->cl->stack; *tc && *tc != c; tc = &(*tc)->snext);
+	for(tc = &c->mon->stack; *tc && *tc != c; tc = &(*tc)->snext);
 	*tc = c->snext;
 
 	if(c == c->mon->sel) {
-		for(t = c->mon->cl->stack; t && !ISVISIBLE(t, c->mon); t = t->snext);
+		for(t = c->mon->stack; t && !ISVISIBLE(t); t = t->snext);
 		c->mon->sel = t;
 	}
 }
@@ -743,7 +696,7 @@
 	unsigned int i, occ = 0, urg = 0;
 	Client *c;
 
-	for(c = m->cl->clients; c; c = c->next) {
+	for(c = m->clients; c; c = c->next) {
 		occ |= c->tags;
 		if(c->isurgent)
 			urg |= c->tags;
@@ -826,8 +779,8 @@
 
 void
 focus(Client *c) {
-	if(!c || !ISVISIBLE(c, selmon))
-		for(c = selmon->cl->stack; c && !ISVISIBLE(c, selmon); c = c->snext);
+	if(!c || !ISVISIBLE(c))
+		for(c = selmon->stack; c && !ISVISIBLE(c); c = c->snext);
 	/* was if(selmon->sel) */
 	if(selmon->sel && selmon->sel != c)
 		unfocus(selmon->sel, False);
@@ -879,17 +832,17 @@
 	if(!selmon->sel)
 		return;
 	if(arg->i > 0) {
-		for(c = selmon->sel->next; c && !ISVISIBLE(c, selmon); c = c->next);
+		for(c = selmon->sel->next; c && !ISVISIBLE(c); c = c->next);
 		if(!c)
-			for(c = selmon->cl->clients; c && !ISVISIBLE(c, selmon); c = c->next);
+			for(c = selmon->clients; c && !ISVISIBLE(c); c = c->next);
 	}
 	else {
-		for(i = selmon->cl->clients; i != selmon->sel; i = i->next)
-			if(ISVISIBLE(i, selmon))
+		for(i = selmon->clients; i != selmon->sel; i = i->next)
+			if(ISVISIBLE(i))
 				c = i;
 		if(!c)
 			for(; i; i = i->next)
-				if(ISVISIBLE(i, selmon))
+				if(ISVISIBLE(i))
 					c = i;
 	}
 	if(c) {
@@ -1139,12 +1092,12 @@
 	unsigned int n = 0;
 	Client *c;
 
-	for(c = m->cl->clients; c; c = c->next)
-		if(ISVISIBLE(c, m))
+	for(c = m->clients; c; c = c->next)
+		if(ISVISIBLE(c))
 			n++;
 	if(n > 0) /* override layout symbol */
 		snprintf(m->ltsymbol, sizeof m->ltsymbol, "[%d]", n);
-	for(c = nexttiled(m->cl->clients, m); c; c = nexttiled(c->next, m))
+	for(c = nexttiled(m->clients); c; c = nexttiled(c->next))
 		resize(c, m->wx, m->wy, m->ww - 2 * c->bw, m->wh - 2 * c->bw, False);
 }
 
@@ -1222,8 +1175,8 @@
 }
 
 Client *
-nexttiled(Client *c, Monitor *m) {
-	for(; c && (c->isfloating || !ISVISIBLE(c, m)); c = c->next);
+nexttiled(Client *c) {
+	for(; c && (c->isfloating || !ISVISIBLE(c)); c = c->next);
 	return c;
 }
 
@@ -1375,8 +1328,8 @@
 	if(m->lt[m->sellt]->arrange) {
 		wc.stack_mode = Below;
 		wc.sibling = m->barwin;
-		for(c = m->cl->stack; c; c = c->snext)
-			if(!c->isfloating && ISVISIBLE(c, m)) {
+		for(c = m->stack; c; c = c->snext)
+			if(!c->isfloating && ISVISIBLE(c)) {
 				XConfigureWindow(dpy, c->win, CWSibling|CWStackMode, &wc);
 				wc.sibling = c->win;
 			}
@@ -1426,6 +1379,7 @@
 	if(c->mon == m)
 		return;
 	unfocus(c, True);
+	detach(c);
 	detachstack(c);
 	c->mon = m;
 	c->tags = m->tagset[m->seltags]; /* assign tags of target monitor */
@@ -1547,8 +1501,6 @@
 	sw = DisplayWidth(dpy, screen);
 	sh = DisplayHeight(dpy, screen);
 	bh = fnt->h + 2;
-	if(!(cl = (Clientlist *)calloc(1, sizeof(Clientlist))))
-		die("fatal: could not malloc() %u bytes\n", sizeof(Clientlist));
 	drw = drw_create(dpy, screen, root, sw, sh);
 	drw_setfont(drw, fnt);
 	updategeom();
@@ -1597,11 +1549,9 @@
 showhide(Client *c) {
 	if(!c)
 		return;
-	if(ISVISIBLE(c, c->mon)) { /* show clients top down */
+	if(ISVISIBLE(c)) { /* show clients top down */
 		XMoveWindow(dpy, c->win, c->x, c->y);
 		if((!c->mon->lt[c->mon->sellt]->arrange || c->isfloating) && !c->isfullscreen)
-			if(c->isfloating)
-				keepfloatingposition(c);
 			resize(c, c->x, c->y, c->w, c->h, False);
 		showhide(c->snext);
 	}
@@ -1635,22 +1585,7 @@
 
 void
 tag(const Arg *arg) {
-	Monitor *m;
-	unsigned int newtags;
 	if(selmon->sel && arg->ui & TAGMASK) {
-		newtags = arg->ui & TAGMASK;
-		for(m = mons; m; m = m->next)
-			/* if tag is visible on another monitor, move client to the new monitor */
-			if(m != selmon && m->tagset[m->seltags] & newtags) {
-				/* prevent moving client to all tags (MODKEY-Shift-0) when multiple monitors are connected */
-				if(newtags & selmon->tagset[selmon->seltags])
-					return;
-				selmon->sel->tags = newtags;
-				selmon->sel->mon = m;
-				arrange(m);
-				break;
-			}
-		/* workaround in case just one monitor is connected */
 		selmon->sel->tags = arg->ui & TAGMASK;
 		focus(NULL);
 		arrange(selmon);
@@ -1669,7 +1604,7 @@
 	unsigned int i, n, h, mw, my, ty;
 	Client *c;
 
-	for(n = 0, c = nexttiled(m->cl->clients, m); c; c = nexttiled(c->next, m), n++);
+	for(n = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), n++);
 	if(n == 0)
 		return;
 
@@ -1677,7 +1612,7 @@
 		mw = m->nmaster ? m->ww * m->mfact : 0;
 	else
 		mw = m->ww;
-	for(i = my = ty = 0, c = nexttiled(m->cl->clients, m); c; c = nexttiled(c->next, m), i++)
+	for(i = my = ty = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), i++)
 		if(i < m->nmaster) {
 			h = (m->wh - my) / (MIN(n, m->nmaster) - i);
 			resize(c, m->wx, m->wy + my, mw - (2*c->bw), h - (2*c->bw), False);
@@ -1713,17 +1648,12 @@
 
 void
 toggletag(const Arg *arg) {
-	Monitor *m;
 	unsigned int newtags;
 
 	if(!selmon->sel)
 		return;
 	newtags = selmon->sel->tags ^ (arg->ui & TAGMASK);
 	if(newtags) {
-		/* prevent adding tags that are in use on other monitors */
-		for(m = mons; m; m = m->next)
-			if(m != selmon && newtags & m->tagset[m->seltags])
-				return;
 		selmon->sel->tags = newtags;
 		focus(NULL);
 		arrange(selmon);
@@ -1732,14 +1662,9 @@
 
 void
 toggleview(const Arg *arg) {
-	Monitor *m;
 	unsigned int newtagset = selmon->tagset[selmon->seltags] ^ (arg->ui & TAGMASK);
 
 	if(newtagset) {
-		/* prevent displaying the same tags on multiple monitors */
-		for(m = mons; m; m = m->next)
-			if(m != selmon && newtagset & m->tagset[m->seltags])
-				return;
 		selmon->tagset[selmon->seltags] = newtagset;
 		focus(NULL);
 		arrange(selmon);
@@ -1835,7 +1759,7 @@
 
 	XDeleteProperty(dpy, root, netatom[NetClientList]);
 	for(m = mons; m; m = m->next)
-		for(c = m->cl->clients; c; c = c->next)
+		for(c = m->clients; c; c = c->next)
 			XChangeProperty(dpy, root, netatom[NetClientList],
 			                XA_WINDOW, 32, PropModeAppend,
 			                (unsigned char *) &(c->win), 1);
@@ -1865,10 +1789,8 @@
 		if(n <= nn) {
 			for(i = 0; i < (nn - n); i++) { /* new monitors available */
 				for(m = mons; m && m->next; m = m->next);
-				if(m) {
+				if(m)
 					m->next = createmon();
-					attachclients(m->next);
-				}
 				else
 					mons = createmon();
 			}
@@ -1889,13 +1811,17 @@
 		else { /* less monitors available nn < n */
 			for(i = nn; i < n; i++) {
 				for(m = mons; m && m->next; m = m->next);
+				while(m->clients) {
+					dirty = True;
+					c = m->clients;
+					m->clients = c->next;
+					detachstack(c);
+					c->mon = mons;
+					attach(c);
+					attachstack(c);
+				}
 				if(m == selmon)
 					selmon = mons;
-				for(c = m->cl->clients; c; c = c->next) {
-					dirty = True;
-					if(c->mon == m)
-						c->mon = selmon;
-				}
 				cleanupmon(m);
 			}
 		}
@@ -2033,31 +1959,11 @@
 
 void
 view(const Arg *arg) {
-	Monitor *m;
-	unsigned int newtagset = selmon->tagset[selmon->seltags ^ 1];
 	if((arg->ui & TAGMASK) == selmon->tagset[selmon->seltags])
 		return;
-
-	/* swap tags when trying to display a tag from another monitor */
-	if(arg->ui & TAGMASK)
-		newtagset = arg->ui & TAGMASK;
-	for(m = mons; m; m = m->next)
-		if(m != selmon && newtagset & m->tagset[m->seltags]) {
-			/* prevent displaying all tags (MODKEY-0) when multiple monitors
-			 * are connected */
-			if(newtagset & selmon->tagset[selmon->seltags])
-				return;
-			m->seltags ^= 1;
-			m->tagset[m->seltags] = selmon->tagset[selmon->seltags];
-			attachclients(m);
-			arrange(m);
-			break;
-		}
-
 	selmon->seltags ^= 1; /* toggle sel tagset */
 	if(arg->ui & TAGMASK)
 		selmon->tagset[selmon->seltags] = arg->ui & TAGMASK;
-	attachclients(selmon);
 	focus(NULL);
 	arrange(selmon);
 }
@@ -2068,7 +1974,7 @@
 	Monitor *m;
 
 	for(m = mons; m; m = m->next)
-		for(c = m->cl->clients; c; c = c->next)
+		for(c = m->clients; c; c = c->next)
 			if(c->win == w)
 				return c;
 	return NULL;
@@ -2130,8 +2036,8 @@
 	if(!selmon->lt[selmon->sellt]->arrange
 	|| (selmon->sel && selmon->sel->isfloating))
 		return;
-	if(c == nexttiled(selmon->cl->clients, selmon))
-		if(!c || !(c = nexttiled(c->next, selmon)))
+	if(c == nexttiled(selmon->clients))
+		if(!c || !(c = nexttiled(c->next)))
 			return;
 	pop(c);
 }
