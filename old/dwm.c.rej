--- dwm.c
+++ dwm.c.orig
@@ -49,7 +49,7 @@
 #define CLEANMASK(mask)         (mask & ~(numlockmask|LockMask) & (ShiftMask|ControlMask|Mod1Mask|Mod2Mask|Mod3Mask|Mod4Mask|Mod5Mask))
 #define INTERSECT(x,y,w,h,m)    (MAX(0, MIN((x)+(w),(m)->wx+(m)->ww) - MAX((x),(m)->wx)) \
                                * MAX(0, MIN((y)+(h),(m)->wy+(m)->wh) - MAX((y),(m)->wy)))
-#define ISVISIBLE(C, M)         ((C->tags & M->tagset[M->seltags]))
+#define ISVISIBLE(C)            ((C->tags & C->mon->tagset[C->mon->seltags]))
 #define LENGTH(X)               (sizeof X / sizeof X[0])
 #define MOUSEMASK               (BUTTONMASK|PointerMotionMask)
 #define WIDTH(X)                ((X)->w + 2 * (X)->bw)
@@ -142,18 +142,12 @@ typedef struct {
 	int monitor;
 } Rule;
 
-struct Clientlist {
-	Client *clients;
-	Client *stack;
-};
-
 /* function declarations */
 static void applyrules(Client *c);
 static int applysizehints(Client *c, int *x, int *y, int *w, int *h, int interact);
 static void arrange(Monitor *m);
 static void arrangemon(Monitor *m);
 static void attach(Client *c);
-static void attachclients(Monitor *m);
 static void attachstack(Client *c);
 static void buttonpress(XEvent *e);
 static void checkotherwm(void);
@@ -191,7 +185,7 @@ static void maprequest(XEvent *e);
 static void monocle(Monitor *m);
 static void motionnotify(XEvent *e);
 static void movemouse(const Arg *arg);
-static Client *nexttiled(Client *c, Monitor *m);
+static Client *nexttiled(Client *c);
 static void pop(Client *);
 static void propertynotify(XEvent *e);
 static void quit(const Arg *arg);
@@ -274,7 +268,6 @@ static Display *dpy;
 static Drw *drw;
 static Monitor *mons, *selmon;
 static Window root;
-static Clientlist *cl;
 
 /* configuration, allows nested code to access above variables */
 #include "config.h"
@@ -410,48 +403,15 @@ arrangemon(Monitor *m)
 void
 attach(Client *c)
 {
-	c->next = c->mon->cl->clients;
-	c->mon->cl->clients = c;
-}
-
-void
-attachclients(Monitor *m) {
-	/* attach clients to the specified monitor */
-	Monitor *tm;
-	Client *c;
-	unsigned int utags = 0;
-	Bool rmons = False;
-	if(!m)
-		return;
-
-	/* collect information about the tags in use */
-	for (tm = mons; tm; tm = tm->next)
-		if(tm != m)
-			utags |= tm->tagset[tm->seltags];
-
-	for (c = m->cl->clients; c; c = c->next)
-		if(ISVISIBLE(c, m)) {
-			/* if client is also visible on other tags that are displayed on
-			 * other monitors, remove these tags */
-			if(c->tags & utags) {
-				c->tags = c->tags & m->tagset[m->seltags];
-				rmons = True;
-			}
-			unfocus(c, True);
-			c->mon = m;
-		}
-
-	if (rmons)
-		for (tm = mons; tm; tm = tm->next)
-			if(tm != m)
-				arrange(tm);
+	c->next = c->mon->clients;
+	c->mon->clients = c;
 }
 
 void
 attachstack(Client *c)
 {
-	c->snext = c->mon->cl->stack;
-	c->mon->cl->stack = c;
+	c->snext = c->mon->stack;
+	c->mon->stack = c;
 }
 
 void
@@ -573,7 +533,7 @@ clientmessage(XEvent *e)
 			setfullscreen(c, (cme->data.l[0] == 1 /* _NET_WM_STATE_ADD    */
 			              || (cme->data.l[0] == 2 /* _NET_WM_STATE_TOGGLE */ && !c->isfullscreen)));
 	} else if (cme->message_type == netatom[NetActiveWindow]) {
-		if (!ISVISIBLE(c, c->mon)) {
+		if (!ISVISIBLE(c)) {
 			c->mon->seltags ^= 1;
 			c->mon->tagset[c->mon->seltags] = c->tags;
 		}
@@ -683,31 +643,10 @@ configurerequest(XEvent *e)
 Monitor *
 createmon(void)
 {
-	Monitor *m, *tm;
-	int i;
+	Monitor *m;
 
-	/* bail out if the number of monitors exceeds the number of tags */
-	for (i=1, tm=mons; tm; i++, tm=tm->next);
-	if (i > LENGTH(tags)) {
-		fprintf(stderr, "dwm: failed to add monitor, number of tags exceeded\n");
-		return NULL;
-	}
-	/* find the first tag that isn't in use */
-	for (i=0; i < LENGTH(tags); i++) {
-		for (tm=mons; tm && !(tm->tagset[tm->seltags] & (1<<i)); tm=tm->next);
-		if (!tm)
-			break;
-	}
-	/* reassign all tags to monitors since there's currently no free tag for the
-	 * new monitor */
-	if (i >= LENGTH(tags))
-		for (i=0, tm=mons; tm; tm=tm->next, i++) {
-			tm->seltags ^= 1;
-			tm->tagset[tm->seltags] = (1<<i) & TAGMASK;
-		}
 	m = ecalloc(1, sizeof(Monitor));
-	m->cl = cl;
-	m->tagset[0] = m->tagset[1] = (1<<i) & TAGMASK;
+	m->tagset[0] = m->tagset[1] = 1;
 	m->mfact = mfact;
 	m->nmaster = nmaster;
 	m->showbar = showbar;
@@ -782,7 +721,7 @@ drawbar(Monitor *m)
 		drw_text(drw, m->ww - sw, 0, sw, bh, lrpad / 2 - 2, stext, 0);
 	}
 
-	for(c = m->cl->clients; c; c = c->next) {
+	for (c = m->clients; c; c = c->next) {
 		occ |= c->tags;
 		if (c->isurgent)
 			urg |= c->tags;
@@ -857,8 +796,8 @@ expose(XEvent *e)
 void
 focus(Client *c)
 {
-	if (!c || !ISVISIBLE(c, selmon))
-		for (c = selmon->cl->stack; c && !ISVISIBLE(c, selmon); c = c->snext);
+	if (!c || !ISVISIBLE(c))
+		for (c = selmon->stack; c && !ISVISIBLE(c); c = c->snext);
 	/* was if (selmon->sel) */
 	if (selmon->sel && selmon->sel != c)
 		unfocus(selmon->sel, 0);
@@ -1494,9 +1433,11 @@ sendmon(Client *c, Monitor *m)
 	if (c->mon == m)
 		return;
 	unfocus(c, 1);
+	detach(c);
 	detachstack(c);
 	c->mon = m;
 	c->tags = m->tagset[m->seltags]; /* assign tags of target monitor */
+	attach(c);
 	attachstack(c);
 	focus(NULL);
 	arrange(NULL);
@@ -1788,17 +1707,12 @@ toggletag(const Arg *arg)
 void
 toggleview(const Arg *arg)
 {
-	Monitor *m;
 	unsigned int newtagset = selmon->tagset[selmon->seltags] ^ (arg->ui & TAGMASK);
 
 	if (newtagset) {
-		/* prevent displaying the same tags on multiple monitors */
-		for(m = mons; m; m = m->next)
-			if(m != selmon && newtagset & m->tagset[m->seltags])
-				return;
 		selmon->tagset[selmon->seltags] = newtagset;
 		focus(NULL);
-		attachclients(selmon);
+		arrange(selmon);
 	}
 }
 
@@ -1948,13 +1860,17 @@ updategeom(void)
 			/* less monitors available nn < n */
 			for (i = nn; i < n; i++) {
 				for (m = mons; m && m->next; m = m->next);
+				while (m->clients) {
+					dirty = 1;
+					c = m->clients;
+					m->clients = c->next;
+					detachstack(c);
+					c->mon = mons;
+					attach(c);
+					attachstack(c);
+				}
 				if (m == selmon)
 					selmon = mons;
-				for (c = m->cl->clients; c; c = c->next) {
-					dirty = True;
-					if (c->mon == m)
-						c->mon = selmon;
-				}
 				cleanupmon(m);
 			}
 		}
@@ -2090,31 +2006,13 @@ updatewmhints(Client *c)
 void
 view(const Arg *arg)
 {
-	Monitor *m;
-	unsigned int newtagset = selmon->tagset[selmon->seltags ^ 1];
 	if ((arg->ui & TAGMASK) == selmon->tagset[selmon->seltags])
 		return;
-	/* swap tags when trying to display a tag from another monitor */
-	if (arg->ui & TAGMASK)
-		newtagset = arg->ui & TAGMASK;
-	for (m = mons; m; m = m->next)
-		if (m != selmon && newtagset & m->tagset[m->seltags]) {
-			/* prevent displaying all tags (MODKEY-0) when multiple monitors
-			 * are connected */
-			if (newtagset & selmon->tagset[selmon->seltags])
-				return;
-			m->sel = selmon->sel;
-			m->seltags ^= 1;
-			m->tagset[m->seltags] = selmon->tagset[selmon->seltags];
-			attachclients(m);
-			arrange(m);
-			break;
-		}
 	selmon->seltags ^= 1; /* toggle sel tagset */
 	if (arg->ui & TAGMASK)
 		selmon->tagset[selmon->seltags] = arg->ui & TAGMASK;
 	focus(NULL);
-	attachclients(selmon);
+	arrange(selmon);
 }
 
 Client *
